
reset;
model C:\Users\claud\Desktop\graph_optimization\lab07\ex7-parameters.mod;
model C:\Users\claud\Desktop\graph_optimization\lab07\solutions\ex7.2.mod;
data C:\Users\claud\Desktop\graph_optimization\lab07\ex7-3.dat;


problem master;
option solver gurobi;

problem pricing;
option solver gurobi;

#auxiliary parameters
param flag default 0;
param max_iter default 100;

let S:= N;

for{i in 1..N}{
	
	let a[i,i] := 1;

}


printf "a matrix";
for{i in 1..N}{
	for{j in 1..N}{
	
	printf " %d", a[i,j];

	}
	printf "\n";
}


printf "\n \t \t \t COLUMN GENERATION \n\n\n" > resultsCG.txt;
printf"------------------------------------------------ \n" > resultsCG.txt;

for{counter in 1 .. max_iter} 
{     
	#reset flag
	let flag := 0;
	     
    #solve the current master problem   
	solve master;
	
	#print the optimal objective value of the current master problem 
	printf"\n objective function (bins): %7.6f\n", bin_CG > resultsCG.txt;
	printf"\n used bins: "> resultsCG.txt;
	for{binindex in 1..S}{
		if (l[binindex] > 0) then{
			printf"\n bin %d (%g) -rc %7.6f ", binindex, l[binindex], l[binindex].rc > resultsCG.txt;
			printf"\t items: "> resultsCG.txt;
			for{itemindex in 1..N}{
				if(a[itemindex, binindex] == 1) then{
					printf" %d \t", itemindex > resultsCG.txt;
				}
			}
		}
	
	}
	printf"\n\n"> resultsCG.txt;
	
	
	#set the profit of each item equal to
	#the corresponding dual variable of the current master problem	
	for{i in 1..N} {
		if(cover_item[i].dual <=0) then let pi[i] := 0;
		else{
			let pi[i] := cover_item[i].dual;
		}
	}
		
	#solve the current pricing problem
	solve pricing;
	
	#print the cluster selected by the current pricing problem	
	printf "\n Candidate new cluster: \t" > resultsCG.txt;	
	for{i in 1..N}
	{
		if (u[i] = 1) then
			printf "%d  ",i > resultsCG.txt;
	}
	
	#print the profit of the candidate new cluster
	printf "\n profit: %7.6f \n", profit > resultsCG.txt;
	
	#check if the candidate new cluster makes the current dual solution infeasible
	if(profit > 1.00001)then{
			#add the candidate new cluster (column/variable) to the master problem				
		let S:=S+1;	    			
		for{i in 1..N}
			let a[i,S]:= u[i];
		
		#print the current number of clusters in the master problem
	 	printf "\n Added cluster variable\n"> resultsCG.txt;
	    printf" S=%d \n", S > resultsCG.txt;
		printf" \n" > resultsCG.txt;
		printf"------------------------------------------------ \n" > resultsCG.txt;
		
		#current master problem solution not optimal -> set flag to 1	
		let flag:= 1;	
	}
	else 
	{
		#current master problem solution optimal -> set flag to 0	
		let flag := 0;
		
		printf "\n Did not add cluster variable \n \n" > resultsCG.txt;
		printf"------------------------------------------------ \n" > resultsCG.txt;
		
		#terminate the column generation procedure
		break;
	}
}

#solve the master problem with the final set of clusters (columns/variables)
solve master;

#print the optimal objective function value of the final master problem
printf "\n final master objective: %7.6f \n", bin_CG > resultsCG.txt;
#print the number of columns (variables) of the final master problem	
printf "\n final number of columns: %7d \n", S > resultsCG.txt;

#check if the column generation procedure is forced to terminate
#before finding the optimal solution 
if (flag=1) then
	printf"\n Solution is not optimal: increase number of iterations!\n" > resultsCG.txt;	
else
	printf"\n Solution is optimal!\n" > resultsCG.txt;	

